{"version":3,"sources":["lib/palette.js","components/auth/AuthTemplate.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","components/conmon/Button.js","components/auth/AuthForm.js","Login.js","modules/user.js","containers/auth/LoginForm.js","pages/LoginPages.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/conmon/Responsive.js","components/writer/Editer.js","components/writer/TagboxHook.js","pages/WriterPages.js","pages/PostPage.js","components/conmon/Header.js","components/conmon/HeaderContainer.js","pages/PostListPage.js","components/GlobalStyled.js","modules/boardReduce.js","containers/Container.js","components/Counter.js","containers/CounterContainer.js","components/ToDo.js","pages/Home.js","App.js","modules/counter.js","modules/todos.js","modules/index.js","index.js"],"names":["palette","gray","cyan","AuthTemplateBlock","styled","div","WhiteBox","LINK","Link","AuthTemplate","children","className","to","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","error","client","axios","create","defaults","baseURL","headers","common","interceptors","use","Promise","reject","login","username","password","console","log","post","register","check","get","logout","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changedField","form","key","value","initializeForm","registerSaga","authAPI","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","StyledButton","button","props","fullWidth","css","withRouter","history","rest","onClick","e","push","AuthFormBlock","StyleInput","input","Footer","ButtonWidthMarginTop","Button","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","marginTop","GoogleButton","onSocial","onSuccess","a","clientId","responseType","onFailure","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","checkSaga","checkFailureSaga","localStorage","removeItem","checkError","useState","setError","dispatch","useDispatch","useSelector","useEffect","setItem","JSON","stringify","target","onSumbit","preventDefault","LoginPage","status","includes","RegisterPage","ResopnsiveBlock","Responsive","EditorBlock","TitleInput","QuillWrapper","Editor","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","ref","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","tag","onRemove","TagList","tags","map","TagBox","setInput","localTags","setLocalTags","insertTag","useCallback","filter","t","trim","WritePage","PostPage","HeaderBlock","Wrapper","Spacer","UserInfo","Header","onLogout","HeaderContainer","PostListPage","GlobalStyle","createGlobalStyle","MODE_REMOVE","MODE_SAVE","MODE_SELECT_ROW","Container","boardId","boardTitle","boardContent","inputData","setInputData","boardRemove","selectRowData","boardReducer","onRowClick","boardSelectRow","boards","border","width","row","onSave","saveData","boardSave","changeInput","resetForm","Counter","number","onIncrease","onDecrease","connect","counter","increase","decrease","TodoItem","todo","onToggle","Todos","todos","onChangeInput","onInsert","preventDefalut","MapContent","script","document","createElement","async","src","head","appendChild","onload","kakao","maps","load","container","getElementById","options","center","LatLng","level","window","Map","MapContents","id","Component","App","path","component","LoginPages","Home","WriterPages","board","exact","INCREASE","DECREASE","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","done","concat","do","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSaGaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render"],"mappings":"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","file":"static/js/main.9cb635a4.chunk.js","sourcesContent":["//색상 팔레트 파일\r\n// source: https://yeun.github.io/open-color/\r\nconst palette = {\r\n    gray: [\r\n      '#f8f9fa',\r\n      '#f1f3f5',\r\n      '#e9ecef',\r\n      '#dee2e6',\r\n      '#ced4da',\r\n      '#adb5bd',\r\n      '#868e96',\r\n      '#495057',\r\n      '#343a40',\r\n      '#212529',\r\n    ],\r\n    cyan: [\r\n      '#e3fafc',\r\n      '#c5f6fa',\r\n      '#99e9f2',\r\n      '#66d9e8',\r\n      '#3bc9db',\r\n      '#22b8cf',\r\n      '#15aabf',\r\n      '#1098ad',\r\n      '#0c8599',\r\n      '#0b7285',\r\n    ],\r\n  };\r\n\r\n  export default palette;\r\n  ","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/palette\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n// 회원가입 로그인 페이지의 레이아수을 담당하는 컴포넌트\r\n\r\n\r\n// 화면 전체를 채운다\r\nconst AuthTemplateBlock=styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground:${palette.gray[2]} ;\r\n\r\n/* flex 로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nflex-direction: column;\r\n\r\n\r\n`;\r\n\r\n// 횐색 박스\r\nconst WhiteBox=styled.div`\r\n.logo-area{\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n}\r\nbox-shadow: 0 0 8px rgba(0,0,0,0.025);\r\npadding: 2rem;\r\nwidth: 360px;\r\nbackground: white;\r\nborder-radius: 2px;\r\n`;\r\n\r\n\r\n\r\nconst LINK=styled(Link)``;\r\n\r\nconst AuthTemplate=({children})=>{\r\n    return <AuthTemplateBlock>\r\n    <WhiteBox>\r\n    <div className=\"logo-area\">\r\n    <LINK to =\"/\">REACTERS</LINK>\r\n    </div>\r\n        {children} \r\n        </WhiteBox>     \r\n        </AuthTemplateBlock>\r\n};\r\n\r\nexport default AuthTemplate;","import {createAction,handleActions} from \"redux-actions\";\r\n\r\nconst START_LOADING='loading/START_LOADING';\r\nconst FINISH_LOADING='loading/FINISH_LOADING';\r\n\r\n// 요청을 위한 액션 타입을 payload 로 설정한다->sample/GET_POST\r\n\r\nexport const startLoading=createAction(\r\n    START_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nexport const finishLoading=createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nconst initialState={};\r\n\r\nconst loading=handleActions(\r\n    {\r\n        [START_LOADING]:(state,action)=>({\r\n            ...state,\r\n            [action.payload]:true,\r\n        }),\r\n        [FINISH_LOADING]:(state,action)=>({\r\n            ...state,\r\n            [action.payload]:false,\r\n\r\n        }),\r\n    },\r\n    initialState,\r\n\r\n);\r\n\r\nexport default loading;","import { call, put } from \"redux-saga/effects\";\r\nimport {startLoading,finishLoading} from \"../modules/loading\";\r\n\r\n\r\nexport const createRequestActionTypes=type=>{\r\n    const SUCCESS=`${type}_SUCCESS`;\r\n    const FAILURE=`${type}_FAILURE`;\r\n    return [type,SUCCESS,FAILURE];\r\n};\r\n\r\n\r\n\r\nexport default function createRequestSaga(type,request){\r\n    const SUCCESS=`${type}_SUCCESS`;\r\n    const FAILURE=`${type}_FAILURE`;\r\n\r\n    return function*(action){\r\n        yield put(startLoading(type)); //로딩시작\r\n\r\n        try{\r\n            const response=yield call(request,action.payload);\r\n            yield put({\r\n                type:SUCCESS,\r\n                payload:response.data,\r\n            });\r\n\r\n        }catch(e){\r\n            yield put({\r\n                type:FAILURE,\r\n                payload:e,\r\n                error:true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type));// 로딩 끝\r\n\r\n    };\r\n};","import axios from \"axios\";\r\n\r\nconst client = axios.create();\r\n\r\n// 글로벌 설정\r\n\r\n// API 주소를 다른 곳으로 사용\r\nclient.defaults.baseURL=\"https://external-api-server.com/\"\r\n\r\n// 헤더 설정\r\nclient.defaults.headers.common['Authorization']='Bearer a1b2c3d4';\r\n\r\n// 인터셉터 설정\r\naxios.interceptors.response.use(\r\n    response=>{\r\n        //요청 성공 시 특정 작업 수행\r\n        return response;\r\n    },\r\n    error=>{\r\n        //요청 실패시 특정 작업 수행\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n\r\nexport default client;\r\n\r\n\r\n","import client from \"./client\";\r\n\r\n//로그인\r\nexport function login({username,password}){\r\n    console.log(username,password);\r\n    client.post('/api/auth/login',{username,password})\r\n}\r\n\r\n;\r\n\r\n//회원가입\r\nexport const register=({username,password})=>\r\nclient.post('/api/auth/register',{username,password});\r\n\r\n//로그인 상태 확인\r\nexport const check=()=>client.get('/api/auth/check');\r\n\r\n\r\n//로그아웃\r\nexport const logout =()=>client.post('api/auth/logout');","import {createAction,handleActions} from \"redux-actions\";\r\nimport produce from \"immer\";\r\nimport {takeLatest} from \"redux-saga/effects\";\r\nimport createRequestSaga, {\r\n    createRequestActionTypes}\r\n     from \"../lib/createRequestSaga\"\r\nimport * as authAPI from \"../lib/api/auth\";\r\n\r\n\r\nconst CHANGE_FIELD='auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM='auth/INITIALIZE_FORM';\r\n\r\nconst[REGISTER,REGISTER_SUCCESS,REGISTER_FAILURE]= createRequestActionTypes(\r\n    'auth/REGISTER'\r\n    );\r\n\r\nconst [LOGIN,LOGIN_SUCCESS,LOGIN_FAILURE]= createRequestActionTypes(\r\n    'auth/LOGIN'\r\n    \r\n    );\r\n\r\n\r\nexport const changedField=createAction(\r\n    CHANGE_FIELD,\r\n    ({form,key,value})=>({\r\n        form, // register , login\r\n        key, //username,password,passwordConform\r\n        value, // 실제 바꾸려는 값\r\n\r\n    }),\r\n);\r\nexport const initializeForm=createAction(INITIALIZE_FORM, form=>form); //register\r\n\r\n//login\r\n\r\n\r\nexport const register=createAction(REGISTER, ({username,password})=>({\r\n    username,\r\n    password,\r\n}));\r\n\r\nexport const login=createAction(LOGIN, ({username,password})=>({\r\n    username,\r\n    password,\r\n}));\r\n\r\n//사가 생성\r\nconst registerSaga=createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga=createRequestSaga(LOGIN,authAPI.login);\r\nexport function* authSaga(){\r\n    yield takeLatest(REGISTER,registerSaga);\r\n    yield takeLatest(LOGIN,loginSaga)\r\n}\r\n\r\nconst initialState={\r\n    register:{\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login:{\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth:null,\r\n    authError:null,\r\n};\r\n\r\nconst auth =handleActions(\r\n    {\r\n        [CHANGE_FIELD] : (state, {payload: { form,key,value} })=>\r\n        produce(state,draft=>{\r\n            draft[form][key]=value; //state.register.username를 바꾼다.\r\n        }),\r\n        [INITIALIZE_FORM] : (state, {payload: form})=>({\r\n            ...state,\r\n            [form]:initialState[form],\r\n            authError:null //폼 전환시 회원 인증 에러 초기화\r\n        }),\r\n        //회원 가입 성공\r\n        [REGISTER_SUCCESS]:(state, {payload:auth})=>({\r\n            ...state,\r\n            authError:null,\r\n            auth,\r\n        }),\r\n        //회원가입 실패\r\n        [REGISTER_FAILURE]:(state, {payload:error})=>({\r\n            ...state,\r\n            authError:error,\r\n            \r\n        }),\r\n        //로그인 성공\r\n        [LOGIN_SUCCESS]:(state, {payload:auth})=>({\r\n            ...state,\r\n            authError:null,\r\n            auth\r\n        }),\r\n        //로그인 실패\r\n        [LOGIN_FAILURE]:(state,{payload:error})=>({\r\n            ...state,\r\n            authError:error,\r\n        })\r\n    },\r\n    initialState,\r\n    \r\n);\r\n\r\nexport default auth;","import React from \"react\";\r\nimport styled,{css} from \"styled-components\";\r\nimport palette from \"../../lib/palette\";\r\nimport {withRouter} from \"react-router-dom\"\r\n\r\n\r\n\r\nconst StyledButton=styled.button`\r\n    border:none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding:0.25rem 1rem;\r\n    color:white;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    background: ${palette.gray[8]};\r\n    &:hover{\r\n        background :${palette.gray[6]};\r\n    }\r\n    ${props=>\r\n    props.fullWidth &&\r\n    css`\r\n    padding-top: 0.75rem;\r\n    padding-bottom: 0.75rem;\r\n    width: 100%;\r\n    font-size: 1.125rem;\r\n    `\r\n        \r\n    }\r\n\r\n    ${props=>\r\n    props.cyan && \r\n    css`\r\n        background: ${palette.cyan[5]};\r\n        &:hover{\r\n            background: ${palette.cyan[4]};\r\n        }\r\n    `\r\n    }\r\n`\r\n\r\n\r\nconst Button=({to,history,...rest})=>{\r\n    const onClick=e=>{\r\n        //to 가 있다면 to로 페이지 이동\r\n        if(to){\r\n            history.push(to);\r\n        }\r\n        if(rest.onClick){\r\n            rest.onClick(e);\r\n        }\r\n    };\r\n\r\n    return <StyledButton {...rest} onClick={onClick}/>\r\n}\r\n\r\nexport default withRouter(Button);\r\n\r\n//history 를 사용하여 to 값이 있을 경우 페이지를 이동하도록 구현한뒤 Button 컴포넌트를 사용할때 to 값을 props로 넣어주면 Link 컴포넌트로 작동한다.\r\n\r\n//버튼 컴포넌트에 cyan r과 fullwidth 라는 props 를 넣어주면 다른 스타일이 적용된다.","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../conmon/Button\";\r\nimport {Link} from \"react-router-dom\";\r\nimport palette from \"../../lib/palette\";\r\n\r\n// 회원가입 또는 로그인 폼을 보여 준다\r\n\r\n\r\n\r\n\r\nconst AuthFormBlock=styled.div`\r\nh3{\r\n    margin: 0;\r\n    color:${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n    \r\n}\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyleInput=styled.input`\r\nfont-size:1rem;\r\nborder:none;\r\nborder-bottom: 1px solid ${palette.gray[5]};\r\npadding-bottom: 0.5rem;\r\noutline: none;\r\nwidth: 100%;\r\n&:focus{\r\ncolor:$oc-teal-7;\r\nborder-bottom: 1px solid ${palette.gray[7]};\r\n}\r\n& + &{\r\n    margin-top: 1rem;\r\n}\r\n`;\r\n\r\n\r\n//폼 하단에 로그인 혹은 회원가입 링크를 보여준다\r\nconst Footer=styled.div`\r\n    margin-top: 2rem;\r\n    text-align: right;\r\n    a{\r\n        color:${palette.gray[6]};\r\n        text-decoration: underline;\r\n        &:hover{\r\n            color:${palette.gray[9]}\r\n        }\r\n        \r\n    }\r\n`;\r\n\r\n//상단 여백\r\nconst ButtonWidthMarginTop=styled(Button)`\r\nmargin-top: 1rem;\r\n`;\r\n\r\nconst textMap={\r\n    login:\"로그인\",\r\n    register:\"회원가입\"\r\n}\r\n\r\n\r\nconst ErrorMessage=styled.div`\r\ncolor:red;\r\ntext-align: center;\r\nfont-size: 0%.875rem;\r\nmargin-top: 1rem;\r\n`;\r\n\r\n\r\nconst AuthForm=({type,form,onChange,onSubmit,error})=>{\r\n    const text=textMap[type];\r\n    return(\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n\r\n                <StyleInput\r\n                 autoComplete=\"username\" \r\n                 name=\"username\" \r\n                 placeholder=\"아이디\" \r\n                 onChange={onChange} \r\n                 value={form.username}\r\n                 />\r\n\r\n                <StyleInput\r\n                autoComplete=\"new-password\"\r\n                name=\"password\"\r\n                placeholder=\"비밀번호\"\r\n                type=\"password\"\r\n                onChange={onChange}\r\n                value={form.password}\r\n                />\r\n                \r\n                {type === 'register' && (\r\n                     <StyleInput\r\n                     autoComplete=\"new-password\"\r\n                     name=\"passwordConfirm\"\r\n                     placeholder=\"비밀번호 확인\"\r\n                     type=\"password\"\r\n                     onChange={onChange}\r\n                     value={form.passwordConfirm}\r\n                     />\r\n                )}\r\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                    <ButtonWidthMarginTop cyan fullWidth styled={{marginTop:'1rem'}}>\r\n                 {text}\r\n                    </ButtonWidthMarginTop>\r\n            </form>\r\n            <Footer>\r\n                {type === 'login' ? (\r\n                      <Link to=\"/register\">회원가입</Link>\r\n                ):(\r\n                    <Link to=\"/login\">로그인</Link>\r\n                )}\r\n              \r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;\r\n\r\n//<Button cyan fullWidth > 는 <Button cyan={true} fullWidth={true} /> 와 같은 의미 이다.","import React from 'react';\r\nimport {GoogleLogin} from 'react-google-login';\r\n\r\nconst clientId = \"90969144529-4r64ccts34g2b0582lr6ojosclgcftra.apps.googleusercontent.com\";\r\n\r\nexport default function GoogleButton({ onSocial }){\r\n    const onSuccess = async(response) => {\r\n    \tconsole.log(response);\r\n    \r\n        // const { googleId, profileObj : { email, name } } = response;\r\n      \r\n        // await onSocial({\r\n        //     socialId : googleId,\r\n        //     socialType : 'google',\r\n        //     email,\r\n        //     nickname : name\r\n        // });\r\n    }\r\n\r\n    const onFailure = (error) => {\r\n        console.log(error);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                responseType={\"id_token\"}\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}/>\r\n        </div>\r\n    )\r\n}","import {createAction,handleActions} from \"redux-actions\";\r\nimport {takeLatest,call} from \"redux-saga/effects\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER=\"user/TEMP_SET_USER\"; //새로 고침 이후 임시 로그인 처리\r\n//회원 정보 확인\r\n\r\nconst [CHECK,CHECK_SUCCESS,CHECK_FAILURE]=createRequestActionTypes(\r\n    'user/CHECK,'\r\n)\r\n\r\nconst LOGOUT='user/Logout';\r\n\r\nexport const tempSetUser=createAction(TEMP_SET_USER, user=>user);\r\nexport const check=createAction(CHECK);\r\nexport const logout=createAction(LOGOUT)\r\n\r\n\r\nconst checkSaga=createRequestSaga(CHECK,authAPI.check);\r\n\r\n\r\nfunction checkFailureSaga(){\r\n    try{\r\n        localStorage.removeItem('user'); //localtorage 에서 user를 제거\r\n    }catch(e){\r\n        console.log('localStorage is not working')\r\n    }\r\n}\r\n\r\nfunction* logoutSaga(){\r\n    try{\r\n        yield call(authAPI,logout); //logout API 호출\r\n        localStorage.removeItem('user'); //localStoage 에서 user 를 제거\r\n\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function* userSaga(){\r\n    yield takeLatest(CHECK,checkSaga);\r\n    yield takeLatest(CHECK_FAILURE,checkFailureSaga);\r\n    yield takeLatest(LOGOUT,logoutSaga);\r\n\r\n}\r\n\r\nconst initialState={\r\n    user:null,\r\n    checkError:null,\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]:(state,{payload:user})=>({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]:(state,{payload:user})=>({\r\n            ...state,\r\n            user,\r\n            checkError:null,\r\n        }),\r\n        [CHECK_FAILURE]:(state,{payload:error})=>({\r\n            ...state,\r\n            user:null,\r\n            checkError:error,\r\n          \r\n            }),\r\n            [LOGOUT]:state=>({\r\n                ...state,\r\n                user:null,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\n\r\n","import React, {useEffect,useState} from \"react\";\r\nimport{useDispatch,useSelector} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {changedField,initializeForm,login} from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport Login from \"../../Login\";\r\nimport {check} from \"../../modules/user\";\r\n\r\nconst LoginForm=({history})=>{\r\n    const [error,setError]=useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form,auth,authError,user} = useSelector(({auth,user})=>({\r\n        form:auth.login,\r\n        auth:auth.auth,\r\n        authError:auth.authError,\r\n        user:user.user\r\n    }));\r\n    \r\n    //인픗 변경 이벤트 핸들러\r\n    const onChange =e=>{\r\n        const {value,name}=e.target;\r\n        dispatch(\r\n            changedField({\r\n                form:'login',\r\n                key:name,\r\n                value\r\n\r\n            })\r\n        );\r\n    };\r\n\r\n    //폼 등록 이벤트 핸들러\r\n    const onSumbit =(e)=>{\r\n        e.preventDefault();\r\n        const {username,password}=form;\r\n        dispatch(login({username,password}));\r\n        //구현 예정\r\n    };\r\n\r\n    //컴포넌트가 처음 렌더링 될때 form 을 초기화함\r\n    useEffect(()=>{\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(()=>{\r\n        if(authError){\r\n            console.log(\"오류발생\");\r\n            console.log(authError);\r\n            setError(\"로그인 실패\")\r\n            return;\r\n        }\r\n        if(auth){\r\n            console.log('로그인성공');\r\n            console.log(check());\r\n\r\n        }\r\n    }, [auth,authError,dispatch]);\r\n\r\n\r\n    useEffect(()=>{\r\n    console.log(user);\r\n    \r\n        if(user){\r\n            history.push('/');\r\n            try{\r\n                localStorage.setItem('user',JSON.stringify(user));\r\n            }catch(e){\r\n                console.log('localStorage is not working')\r\n            }\r\n        }else{\r\n            console.log('else')\r\n        }\r\n    },[history,user]);\r\n\r\n    return(\r\n        <>\r\n        <AuthForm\r\n        type=\"login\"\r\n        form={form}\r\n        onChange={onChange}\r\n        onSumbit={onSumbit}\r\n        error={error}\r\n        />\r\n    <Login/>\r\n</>\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React from \"react\";\r\nimport AuthTemplate from \"../components/auth/AuthTemplate\"\r\nimport LoginForm from \"../containers/auth/LoginForm\";\r\n\r\n\r\nconst LoginPage =()=>{\r\n    return(\r\n        <AuthTemplate>\r\n            <LoginForm/>\r\n        </AuthTemplate>\r\n        )\r\n}\r\n\r\nexport default LoginPage;","import React, {useEffect,useState} from \"react\";\r\nimport{useDispatch,useSelector} from \"react-redux\";\r\nimport {changedField,initializeForm,register} from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\"\r\nimport {check} from \"../../modules/user\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\nconst RegisterForm=({history})=>{\r\n    const [error,setError]=useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form,auth,authError,user} = useSelector(({auth,user})=>({\r\n        form:auth.register,\r\n        auth:auth.auth,\r\n        authError:auth.authError,\r\n        user:user.user\r\n    }));\r\n    \r\n    //인픗 변경 이벤트 핸들러\r\n    const onChange =e=>{\r\n        const {value,name}=e.target;\r\n        dispatch(\r\n            changedField({\r\n                form:'register',\r\n                key:name,\r\n                value\r\n\r\n            })\r\n        );\r\n    };\r\n\r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = e =>{\r\n        e.preventDefault();\r\n        const {username,password,passwordConfirm} = form;\r\n        //하나라도 비어 있다면\r\n        if([username,password,passwordConfirm].includes('')){\r\n            setError('빈칸을 입력하세요');\r\n            return;\r\n        }\r\n        //비밀번호가 일치하지 않는다면\r\n        if(password !== passwordConfirm){\r\n            setError('비밀번호가 일치하지 않습니다');\r\n            dispatch(changedField({form:'register',key:'password',value:''}));\r\n            dispatch(changedField({form:'register',key:'passwordConfirm',value:''}));\r\n            return;\r\n        }\r\n        if(password !== passwordConfirm){\r\n            //TODO :오류처리\r\n            return;\r\n\r\n        }\r\n        dispatch(register({username,password}))\r\n        //구현 예정\r\n    };\r\n\r\n    //컴포넌트가 처음 렌더링 될때 form 을 초기화함\r\n    useEffect(()=>{\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(()=>{\r\n        if(authError){\r\n            //계정명이 이미 존재할때\r\n            if(authError.response.status !== 409){\r\n                setError(\"이미 존재하는 계정입니다\");\r\n                return;\r\n\r\n            }\r\n\r\n            //기타 이유\r\n            setError('회원가입 실패');\r\n            return;\r\n        }\r\n\r\n        if(auth){\r\n            console.log(\"회원가입 성공\")\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    },[auth,authError,dispatch]);  \r\n\r\n//user 값이 잘 설정 되었는지 확인\r\nuseEffect(()=>{\r\n    if(user){\r\n        history.push('/');// 홈화면으로 이동\r\n        history.push('/');\r\n        try{\r\n            localStorage.setItem('user',JSON.stringify(user));\r\n        }catch(e){\r\n            console.log('localStorage is not working')\r\n        }\r\n    }\r\n}, [history,user]);\r\n    return(\r\n        <AuthForm\r\n        type=\"register\"\r\n        form={form}\r\n        onChange={onChange}\r\n        onSubmit={onSubmit}\r\n        error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);","import React from \"react\";\r\nimport AuthTemplate from \"../components/auth/AuthTemplate\";\r\nimport RegisterForm from \"../containers/auth/RegisterForm\";\r\n\r\nconst RegisterPage =()=>{\r\n    return(\r\n        <AuthTemplate>\r\n            <RegisterForm/>\r\n        </AuthTemplate>\r\n    )\r\n};\r\n\r\nexport default RegisterPage;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst ResopnsiveBlock=styled.div`\r\npadding-left: 1rem;\r\npadding-right: 1rem;\r\nwidth: 1024px;\r\nmargin: 0 auto;   //중앙정렬\r\n\r\n@media (max-width:1024px){\r\n    width: 768px;\r\n}\r\n\r\n@media (max-width:768px){\r\n    width: 100%;\r\n}\r\n`\r\n\r\nconst Responsive=({children,...rest})=>{\r\n    return<ResopnsiveBlock {...rest}>{children}</ResopnsiveBlock>\r\n};\r\n\r\nexport default Responsive;\r\n\r\n\r\n\r\n\r\n","import {useRef,useEffect} from 'react';\r\nimport Quill from \"quill\";\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from \"styled-components\";\r\nimport Responsive from \"../conmon/Responsive\"\r\n\r\n//글을 작성하는 에디터 Quill 설치\r\n\r\n//제목과 내용을 입력할 수 있는 컴포넌트\r\n//제목은 input 내용은 Quill 에디터 사용\r\n\r\nconst EditorBlock=styled(Responsive)`\r\n/* 페이지 위아래 여백 지정 */\r\npadding-top: 5rem;\r\npadding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput=styled.input`\r\nfont-size: 3rem;\r\noutline: none;\r\npadding-bottom: 0.5rem;\r\nborder: none;\r\nborder-bottom: 1px solid rgba(0,0,0,0.3);\r\n    margin-bottom: 2rem;\r\n    width: 100%;\r\n\r\n`;\r\n\r\nconst QuillWrapper=styled.div`\r\n    /* 최소 크기 지정 및 padding 제거 */\r\n    .ql-editor{\r\n        padding: 0;\r\n        min-height: 320px;\r\n        font-size: 1.125rem;\r\n        line-height: 1.5;\r\n    }\r\n    .ql-editor.ql-block::before{\r\n        left:0px;\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst Editor=()=>{\r\n    const quillElement=useRef(null); //Quill 를 적용할 DiveElement를 설정\r\n    const quillInstance=useRef(null); //Quill 인스턴스를 설정\r\n\r\n        useEffect(()=>{\r\n            quillInstance.current=new Quill(quillElement.current,\r\n                {\r\n                    theme:'bubble',\r\n                    placeholder:'내용을 작성하세요...',\r\n                    modules:{\r\n                            //더 많은 옵션\r\n                            //https://quilljs.com/docs/modules/tiilbar/참고\r\n                            toolbar:[\r\n                                [{header:'1'},{header:'2'}],\r\n                                ['bold','italic','underline','strike'],\r\n                                [{list:'ordered'},{list:'bullet'}],\r\n                                ['blockquote','code-block','link','image']\r\n                            ],\r\n                    },\r\n                }\r\n                );\r\n        }, []);\r\n\r\n                    return(\r\n                        <EditorBlock>\r\n                        <TitleInput placeholder=\"제목을 입력하세요\"/>\r\n                        <QuillWrapper>\r\n                            <div ref={quillElement}/>\r\n                        </QuillWrapper>\r\n                    </EditorBlock>\r\n                    )\r\n                  \r\n\r\n}\r\n\r\nexport default Editor;","//Hook 을 사용하여 태그를 추가하고 제거하는 기능 구현\r\n\r\nimport React,{useState,useCallback} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/palette\";\r\n\r\nconst TagBoxBlock=styled.div`\r\nwidth: 100%;\r\nborder-top: 1px solid ${palette.gray[2]};\r\npadding-top: 2rem;\r\n\r\nh4{\r\n    color:${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n`;\r\n\r\n\r\nconst TagForm=styled.form`\r\nborder-radius: 4px;\r\noverflow: hidden;\r\ndisplay: flex;\r\nwidth: 256px;\r\nborder: 1px solid ${palette.gray[9]};  //스타일 초기화\r\ninput,\r\nbutton{\r\n    outline: none;\r\n    border:none;\r\n    font-size: 1rem;\r\n}\r\n\r\ninput{\r\n    padding: 0.5rem;\r\n    flex:1;\r\n    min-width: 0;\r\n}\r\nbutton{\r\n    cursor:pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background-color: gray;\r\n    color:white;\r\n    font-weight: bold;\r\n    &:hover{\r\n        background: ${palette.gray[6]};\r\n    }\r\n\r\n}\r\n`;\r\nconst Tag=styled.div`\r\nmargin-right: 0%.5rem;\r\ncolor:${palette.gray[6]};\r\n&:hover{\r\n    opacity:0.5 ;\r\n}\r\n`;\r\n\r\nconst TagListBlock=styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nmargin-top: 0.5rem;\r\n\r\n`;\r\n\r\n//React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링 되도록 처리\r\nconst TagItem = React.memo(({tag,onRemove})=>(\r\n    <Tag onClick={()=>onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n//React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링 되도록 처리\r\nconst TagList = React.memo(({tags,onRemove})=>(\r\n    <TagListBlock>\r\n      {tags.map(tag =>(\r\n          <TagItem key={tag} tag={tag} onRemove={onRemove}/>\r\n      ))};\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox=()=>{\r\n    const[input,setInput]=useState('');\r\n    const[localTags,setLocalTags]=useState([]);\r\n\r\n    const insertTag=useCallback(\r\n        tag=>{\r\n            if(!tag)return; //공백이라면 추가하지 않음\r\n            if(localTags.includes(tag))return; //이미 존재한다면 추가하지 않음\r\n            setLocalTags([...localTags,tag]);\r\n        },\r\n        [localTags],\r\n    );\r\n\r\n    const onRemove=useCallback(\r\n        tag=>{\r\n            setLocalTags(localTags.filter(t=>t !== tag));\r\n        },\r\n    [localTags],\r\n    )\r\n\r\n    const onChange=useCallback(e=>{\r\n        setInput(e.target.value);\r\n    },[]);\r\n\r\n    const onSubmit=useCallback(\r\n        e=>{\r\n            e.preventDefault();\r\n            insertTag(input.trim()); //앞뒤 공백을 없앤 후 등록\r\n            setInput(''); //input 초기화\r\n        },\r\n        [input,insertTag],\r\n    );\r\n    return(\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input\r\n                placeholder=\"태그를 입력하세요\"\r\n                value={input}\r\n                onChange={onChange}\r\n                />\r\n                <button type=\"submit\">추가</button>\r\n            </TagForm>\r\n            <TagList tag={localTags} onRemove={onRemove} />\r\n        </TagBoxBlock>\r\n    )\r\n}\r\n\r\nexport default TagBox;","import React from \"react\";\r\nimport Responsive from \"../components/conmon/Responsive\";\r\nimport Editor from \"../components/writer/Editer\";\r\n// import TagBox from \"../components/writer/TagBox\"\r\nimport TagBox from \"../components/writer/TagboxHook\"\r\n\r\nconst WritePage =()=>{\r\n    return(\r\n            <Responsive>\r\n                <Editor/>\r\n                <TagBox/>\r\n            </Responsive>\r\n            )\r\n}\r\n\r\nexport default WritePage;","import React from \"react\";\r\n\r\nconst PostPage =()=>{\r\n    return(\r\n        <h1>포스트 읽기</h1>\r\n    )\r\n}\r\n\r\nexport default PostPage;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Responsive from \"./Responsive\";\r\nimport Button from \"./Button\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst HeaderBlock=styled.div`\r\nposition: fixed;\r\nwidth: 100%;\r\nbackground: white;\r\nbox-shadow: 0px 2px 4px rgba(0,0,0,0.08);\r\n`;\r\n\r\nconst Wrapper=styled(Responsive)`\r\nheight: 4rem;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between;\r\n.logo{\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n`;\r\n\r\nconst Spacer=styled.div`\r\nheight: 4rem;\r\n`;\r\n\r\nconst UserInfo=styled.div`\r\nfont-weight:800;\r\nmargin-right: 1rem;\r\n`;\r\n\r\nconst Header=({user,onLogout})=>{\r\n    return(\r\n        <>\r\n        <HeaderBlock>\r\n            <Wrapper>\r\n            <Link to=\"/\" className=\"logo\">\r\n                REACTERS\r\n            </Link>\r\n         {user ? (\r\n                    <div className=\"right\">\r\n                    <UserInfo>{user.username}</UserInfo>\r\n                    <Button onClick={onLogout}>로그아웃</Button>\r\n                    </div>\r\n         ):(\r\n            <div className=\"right\">\r\n            <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n         )}\r\n\r\n             \r\n            </Wrapper>\r\n        </HeaderBlock>\r\n        <Spacer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Header from \"../../components/conmon/Header\";\r\nimport {logout} from \"../../modules/user\"\r\n\r\n\r\nconst HeaderContainer =()=>{\r\n    const {user} = useSelector(({user})=>({user:user.user}));\r\n    const dispatch=useDispatch();\r\n    const onLogout=()=>{\r\n        dispatch(logout());\r\n    }\r\n    return <Header user={user} onLogout={onLogout} />\r\n};\r\n\r\nexport default HeaderContainer;","import React from \"react\";\r\n\r\nimport HeaderContainer from \"../components/conmon/HeaderContainer\"\r\n\r\nconst PostListPage =()=>{\r\n    return(\r\n        <>\r\n    <HeaderContainer/>\r\n        <div>안녕하세요</div>\r\n        </>\r\n        )\r\n}\r\n\r\nexport default PostListPage;","import {createGlobalStyle} from \"styled-components\";\r\n// import reset from \"styled-reset\";\r\n\r\n\r\nconst GlobalStyle=createGlobalStyle`\r\nbody{\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n    -webkit-font-smoothing:antialiased;\r\n    -moz-osx-font-smoothing:grayscale;\r\n    box-sizing: border-box; //엘리먼트의 box-sizing 값을 border-box로 설정\r\n    min-height: 100%;\r\n}\r\n\r\n#root{\r\n    min-height: 100%;\r\n}\r\n\r\n/* 추후 회원 인증 페이지에서 배경화면을 페이지의 전체 영역에 채우기 위한 용도 */\r\nhtml{\r\n    height: 100%;\r\n}\r\n/* 링크의 색상 및 밑줄 없애기 */\r\na{\r\n    color:inherit;\r\n    text-decoration: none;\r\n}\r\n\r\n*{\r\n    box-sizing: inherit; //모든 엘리먼트의 box-sizing 값을 border-box 값으로 설정\r\n}\r\n\r\ncode{\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;","// Action Type\r\nconst MODE_REMOVE = 'REMOVE';\r\nconst MODE_SAVE = 'SAVE';\r\nconst MODE_SELECT_ROW = 'SELECT_ROW';\r\n\r\n// Action Create Function\r\nexport const boardSave = (saveData) => ({\r\n    type: MODE_SAVE,\r\n    saveData: {\r\n        boardId: saveData.boardId,\r\n        boardTitle: saveData.boardTitle,\r\n        boardContent: saveData.boardContent\r\n    }\r\n});\r\nexport const boardRemove = (boardId) => ({\r\n    type: MODE_REMOVE,\r\n    boardId: boardId\r\n});\r\nexport const boardSelectRow = (boardId) => ({\r\n    type: MODE_SELECT_ROW,\r\n    boardId: boardId\r\n});\r\n\r\n// initState\r\nconst initialState = {\r\n    boards: [\r\n        {\r\n            boardId: 1,\r\n            boardTitle: '제목1',\r\n            boardContent: '내용내용내용1'\r\n        },\r\n        {\r\n            boardId: 2,\r\n            boardTitle: '제목2',\r\n            boardContent: '내용내용내용2'\r\n        },\r\n        {\r\n            boardId: 3,\r\n            boardTitle: '제목3',\r\n            boardContent: '내용내용내용3'\r\n        },\r\n        {\r\n            boardId: 4,\r\n            boardTitle: '제목4',\r\n            boardContent: '내용내용내용4'\r\n        },\r\n        {\r\n            boardId: 5,\r\n            boardTitle: '제목5',\r\n            boardContent: '내용내용내용5'\r\n        }\r\n    ],\r\n    lastId: 5,\r\n    selectRowData: {}\r\n}\r\n\r\n// Reducer\r\nexport default function boardReducer(state=initialState, action) {\r\n\r\n    switch(action.type) { // 클릭한 boardId 를 가지지 않은 data 만 return\r\n        case MODE_REMOVE:\r\n            return {\r\n                ...state, boards: state.boards.filter(row => \r\n                    row.boardId !== action.boardId)\r\n            };\r\n        case MODE_SAVE:\r\n            if(action.saveData.boardId === '') { // boardId 가 없다면 신규 데이터 저장\r\n                return {\r\n                    lastId: state.lastId+1,\r\n                    boards: state.boards.concat({\r\n                        ...action.saveData, \r\n                        boardId: state.lastId+1\r\n                    }), \r\n                    selectRowData: {}\r\n                };\r\n            } else { // boardId 가 있다면 기존 데이터 수정\r\n                return { ...state, boards: state.boards.map(data => data.boardId === action.saveData.boardId ? {...action.saveData}: data), selectRowData: {} };\r\n            }\r\n            \r\n        case MODE_SELECT_ROW:\r\n            return { // 클릭한 셀의 boardId 를 가진 state 만 찾아서 return\r\n                ...state,\r\n                selectRowData: state.boards.find(row => row.boardId === action.boardId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport BoardList from '../components/BorderList';\r\nimport BoardNew from '../components/BoardNew';\r\nimport { boardRemove, boardSave, boardSelectRow } from '../modules/boardReduce';\r\n\r\n\r\nfunction Container() {\r\n\r\n    // State\r\n    let [inputData, setInputData] = useState({\r\n        boardId: '',\r\n        boardTitle: '',\r\n        boardContent: ''\r\n    });\r\n\r\n    // 함수형 컴포넌트에서 dispatch 를 사용할 수 있게 해줌\r\n    const dispatch = useDispatch();\r\n\r\n    // onRemove 와 onSave 는 Action 을 dispatch 하는 함수\r\n    const onRemove = (boardId) => dispatch(boardRemove(boardId));\r\n    const onSave = (saveData) => dispatch(boardSave(saveData));\r\n\r\n    // reducer state 의 selectRowData field 를 가져온 뒤 subscribe(구독)\r\n    const selectRowData = useSelector(state => state.boardReducer);\r\n    \r\n    // User Function\r\n    const onRowClick = (boardId) => \r\n    {\r\n        // dispatch 를 하고,\r\n        dispatch(boardSelectRow(boardId));\r\n\r\n        // inputData 에 selectRowData 의 값을 반영\r\n        if(JSON.stringify(selectRowData) !== '{}') {\r\n            setInputData({\r\n                boardId: selectRowData.boardId,\r\n                boardTitle: selectRowData.boardTitle,\r\n                boardContent: selectRowData.boardContent\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeInput = (e) => {\r\n        setInputData({\r\n            ...inputData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setInputData({\r\n            boardId: '',\r\n            boardTitle: '',\r\n            boardContent: ''\r\n        })\r\n    }\r\n\r\n    // reducer state 의 boards field 를 가져온뒤 subscribe(구독)\r\n    const boards = useSelector(state => state.boardReducer);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                        <tr a>\r\n                            <td width=\"50\">번호</td>\r\n                            <td width=\"100\">제목</td>\r\n                            <td width=\"200\">내용</td>\r\n                        </tr>\r\n                        {\r\n                            boards.map(row =>\r\n                            (\r\n                                <BoardList \r\n                                    key={row.boardId}\r\n                                    boardId={row.boardId}\r\n                                    boardTitle={row.boardTitle}\r\n                                    boardContent={row.boardContent}\r\n                                    onRemove={onRemove}\r\n                                    onRowClick={onRowClick}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div>\r\n                <BoardNew \r\n                    onSave={onSave} \r\n                    changeInput={changeInput} \r\n                    inputData={inputData} \r\n                    resetForm={resetForm}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Counter=({number,onIncrease,onDecrease})=>{\r\n\r\n    return(\r\n        <div>\r\n            <h1>{number}</h1>\r\n            <div>\r\n                <button onClick={onIncrease}>+1</button>\r\n                <button onClick={onDecrease}>-1</button>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","//컴포넌트 에서 리덕스 스토어에 접근하여 원하는 상태를 받아오고 ,액션도 디스패치 해준다\r\n//리덕스 스토어와 연동된 컴포넌트를 컨테이너 컴포넌트 라고 부른다\r\n\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\"\r\nimport Counter from \"../components/Counter\"\r\n\r\n//위 컴포넌트를 리덕스와 연동하려면 react-redux 에서 제공하는 connect 함수를 사용해야 한다\r\n// connect(mapStateToProps mapDispatchToProps)(연동할 컴포넌트)\r\n//mapStateToProps 리덕스 스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수\r\n//mapDispatchToProps 는 액션생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용하는 함수\r\n//connect  함수를 호출하고 나면 또 다른 함수를 반환한다\r\n//반환된 함수에 컴포넌트를  파리미터로 넣어주면 리덕스와 연동된 컴포넌트가 만들어진다\r\n// const makeContainer=connect(mapStateToProps,mapDispatchToProps)\r\n//makeContainer(타깃 컴포넌트)\r\n\r\nconst CounterContainer =({number,increase,decrease})=>{\r\n    return(\r\n        <Counter number={number} onIncrease={increase} onDecrease={decrease}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps=state=>({\r\n    number:state.counter.number,\r\n});\r\n\r\nconst mapDispatchToProps=dispatch=>({\r\n    //임시 함수\r\n    increase:()=>{\r\n        console.log('increase');\r\n    },\r\n    decrease:()=>{\r\n        console.log('decrease');\r\n    },\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(CounterContainer);\r\n\r\n//mapStateToprops 와 mapDispatchProps 에서 반환하는 객체 내부의 값들은 컴포넌트의 props로 전달된다\r\n//mapStateToProps는 state를 파라미터로 받아오며 이 값은 현재 스토어가 지니고 있는 상태를 가리킨다\r\n//mapDispatchToProps 의 경우 store의 내장함수 dispatch 를 파라미터로 받아온다\r\n//mapDispatchToProps에서는 진행 절차를 설명하기 위해 임시로 console.log를 사용\r\n","import React from \"react\";\r\n\r\nconst TodoItem=({todo,onToggle,onRemove})=>{\r\n    return(\r\n        <div>\r\n            <input type=\"checkbox\"/>\r\n            <span>예제 텍스트</span>\r\n            <button>삭제</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Todos=({\r\n    input,//인풋에 입력되는 텍스트\r\n    todos,// 할 일목록이 들어 있는 객체\r\n    onChangeInput,\r\n    onInsert,\r\n    onToggle,\r\n    onRemove,\r\n})=>{\r\nconst onSubmit=e=>{\r\n    e.preventDefalut();\r\n};\r\nreturn(\r\n    <div>\r\n        <form onSubmit={onSubmit}>\r\n            <input/>\r\n            <button type=\"submit\">등록</button>\r\n        </form>\r\n        <div>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n            <TodoItem/>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Todos;","/*global kakao*/\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nclass MapContent extends Component {\r\n    componentDidMount() {\r\n      const script = document.createElement(\"script\");\r\n      script.async = true;\r\n      script.src =\r\n        \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=b401e67c4abf766538ced0dbca2fbb53&autoload=false\";\r\n      document.head.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        kakao.maps.load(() => {\r\n          let container = document.getElementById(\"Mymap\");\r\n          let options = {\r\n            center: new kakao.maps.LatLng(37.506502, 127.053617),\r\n            level: 7\r\n          };\r\n  \r\n          const map = new window.kakao.maps.Map(container, options);\r\n       \r\n        });\r\n      };\r\n    }\r\n  \r\n    render() {\r\n      return <MapContents id=\"Mymap\"></MapContents>;\r\n    }\r\n  }\r\n  \r\n  const MapContents = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n  `;\r\n  \r\n  export default MapContent;\r\n","import React from \"react\";\nimport { Route } from \"react-router\";\nimport LoginPages from \"./pages/LoginPages\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport WriterPages from \"./pages/WriterPages\";\nimport PostPage from \"./pages/PostPage\";\nimport PostListPage from \"./pages/PostListPage\";\nimport GlobalStyle from \"./components/GlobalStyled\";\nimport Login from \"./Login\";\nimport board from \"./containers/Container\"\nimport CounterContainer from \"./containers/CounterContainer\"\nimport Todo from \"./components/ToDo\"\nimport Home from \"./pages/Home\"\n\n\nfunction App() {\n  return (\n    <>\n    <CounterContainer number={0}/>\n    <Todo/>\n    <Login/>\n    <GlobalStyle/>\n      <Route path=\"/login\" component={LoginPages}/>\n      <Route path=\"/home\" component={Home}/>\n      <Route path=\"/register\" component={RegisterPage}/>\n      <Route path=\"/write\" component={WriterPages}/>\n      <Route path=\"/board\" component={board}/>\n      <Route path={[\"/@:username\",\"/\"]}exact component={PostListPage}/>\n      <Route path={[\"/@:username\",\"/postId\"]} component={PostPage}/>\n    </>\n    );\n}\n\n\nexport default App;\n","//액션 타입 정의\r\n//DUCKS 패턴\r\n//액션 타입 액션 생성함수 리듀서 함수르 기능별로 파일 하나에 몰아서 다 작성하는 방식\r\n\r\n//액션 타입 정의 하기\r\n//액션타입은 대문자로 정의하고 문자열 내용은 모듈이름/액션 이름' 과 같은 형태로 작성한다\r\n//문자열 안에 모듈 이름을 넣음으로 써 나중에 프로젝트가 커졋을대 액션의 이름이 충돌되지 않게 해준다\r\n\r\n\r\nconst INCREASE='counter/INCREASE';\r\nconst DECREASE='counter/DECREASE';\r\n\r\n//액션 생성함수\r\nexport const increase =()=>({type:INCREASE})\r\nexport const decrease=()=>({type:DECREASE});\r\n\r\n//초기 리듀서\r\n//초기 상태 및 리듀서 함수 만들기\r\n//counter 모듈의 초기 상태와 리듀서 함수 생성\r\n//초기 상태에 number 값을 설정,리듀서 함수에는 현재 상태를 참조하여 새로운 객체를 생성하는 반환 하는코드 작성\r\nconst initialState={\r\n    number:0\r\n};\r\n\r\n\r\n\r\nfunction counter(state = initialState, action) {\r\n    switch(action.type){\r\n        case INCREASE:\r\n            return{\r\n                number:state.number+1\r\n            };\r\n            case DECREASE:\r\n                return{\r\n                    number:state.number-1\r\n                };\r\n                default:\r\n                    return state;\r\n\r\n            \r\n    }\r\n}\r\n\r\n\r\nexport default counter;\r\n\r\n","//todos 모듈 생성\r\n\r\n//액션 타입 정의 하기\r\n\r\nconst CHANGE_INPUT='todos/CHANGE_INPUT';  //인풋 값을 변경함\r\nconst INSERT='todos/INSERT'; //새로운 todo를 등록한다\r\nconst TOGGLE='todos/TOGGLE';// todofmf 체크/체크해제한다\r\nconst REMOVE='todos/REMOVE';//todo를 제거한다\r\n\r\n\r\n//액션 생성함수 만들기\r\n//inset 함수는 액션객체를 만들때  파라미터 외에 사전에 이미 선언되어 있는 id라는 값에 의존한다\r\n//이 액션 생성함수는 호출될때 마다 1씩 더해준다.\r\n//이 id 값은 todo 객체가 들고 있게될 고윳값이다\r\n\r\nexport const changeInput=(input)=>({\r\n    type:CHANGE_INPUT,\r\n    input\r\n});\r\n\r\nlet id=3//insert 가 호출 될때 마다 1씩 더해진다\r\n\r\nexport const insert=text=>({\r\n    type:INSERT,\r\n    todo:{\r\n        id:id++,\r\n        text,\r\n        done:false\r\n    }\r\n});\r\n\r\nexport const toggle=id=>({\r\n    type:TOGGLE,\r\n    id\r\n});\r\n\r\nexport const remove=id=>({\r\n    type:REMOVE,\r\n    id\r\n});\r\n\r\n//초기 상태 및 리듀서 함수 만들기\r\n//모듈의 초기 상태와 리듀서 함수를 작성한다\r\n//객체에 한 개 이사으이 값이 들어가므로 불변성을 유지 해주어야 한다..\r\n//배열의 변화를 줄때는 배열 내장 함수를 사용하여 구현하면 된다.\r\n\r\n\r\nconst initialState={\r\n    input:'',\r\n    todos:[\r\n        {\r\n            id:1,\r\n            text:'리덕스 기초 배우기',\r\n            done:true\r\n        },\r\n        {\r\n            id:2,\r\n            text:'리액트와 리덕스 사용하기',\r\n            done:false\r\n        }\r\n    ]\r\n};\r\n\r\nfunction todos(state=initialState,action){\r\n    switch(action.type){\r\n        case CHANGE_INPUT:\r\n            return{\r\n                ...state,\r\n                input:action.input\r\n            };\r\n            case INSERT:\r\n                return{\r\n                    ...state,\r\n                    todos:state.todos.concat(action.do)\r\n                };\r\n\r\n                case TOGGLE:\r\n                    return{\r\n                        ...state,\r\n                        todos:state.todos.map(todo=>\r\n                            todo.id === action.id ? {...todo, done: !todo.done}:todo\r\n                            )\r\n                    };\r\n\r\n                    case REMOVE:\r\n                    return{\r\n                        ...state,\r\n                        todos:state.todos.filter(todo=>todo.id !== action.id)\r\n                    };\r\n                    default:\r\n                        return state;\r\n    }\r\n}\r\n\r\nexport default todos;\r\n\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport { all } from \"redux-saga/effects\";\r\nimport auth, { authSaga } from \"./auth\";\r\nimport loading from \"./loading\";\r\nimport user,{userSaga} from \"./user\";\r\nimport counter from \"./counter\";\r\nimport todos from \"./todos\";\r\n\r\n//createStore 함수를 사용하여 스토어를 만들 때는 리듀서를 하나만 사용해야합니다 그렇기 때문에 기존에 만들었던 리듀서를 하나로 합쳐 주어야한다\r\n//리덕스에서 제공하는 combineReducers라는 유틸 함수르 사용하면 쉽게 처리가능\r\n//파일 이름을 index.js 로 설정해주면 나중에 불러올때 디렉터리 이름까지만 입력하여 불러 올 수 있다.\r\n\r\n\r\nconst rootReducer=combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    counter,\r\n    todos,\r\n\r\n});\r\n\r\nexport function* rootSaga(){\r\n    yield all([authSaga(),userSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\"\nimport{Provider} from \"react-redux\";\nimport {createStore,applyMiddleware} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport createSaGaMiddleware from \"redux-saga\";\nimport rootReducer, {rootSaga} from \"./modules\";\nimport {tempSetUser,check} from \"./modules/user\"\n\n\n\nconst sagaMiddleware =createSaGaMiddleware();\nconst store=createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);//크롬 리덕스 개발자 도구 적용 composeWithDevTools\n\nfunction loadUser(){\n  try{\n    const user=localStorage.getItem('user');\n    if(!user) return; // 로그인 상태가 아니라면 아무것도 안함\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n\n    }catch(e){\n      console.log('localStorage is not working')\n    }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\n\n\n\nReactDOM.render(\n<Provider store={store}>  {/*리액트 컴포넌트에서 스토어를 사용할 수 있도록 APP 컴포넌트를 react-redux 에서 제공하는 Provider 컴포넌트로 감싸 준다  이 컴포넌트를 사용할때는 store를 props로 전달해 주어야 한다*/}\n<BrowserRouter>\n    <App />\n  </BrowserRouter>,\n</Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}